{"remainingRequest":"/Users/minyue/Desktop/minyue/notes/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/minyue/Desktop/minyue/notes/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/minyue/Desktop/minyue/notes/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/minyue/Desktop/minyue/notes/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/minyue/Desktop/minyue/notes/docs/guide/directory-structure.md?vue&type=template&id=00d489e3&","dependencies":[{"path":"/Users/minyue/Desktop/minyue/notes/docs/guide/directory-structure.md","mtime":1629595222355},{"path":"/Users/minyue/Desktop/minyue/notes/node_modules/cache-loader/dist/cjs.js","mtime":1640082691785},{"path":"/Users/minyue/Desktop/minyue/notes/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1640082692121},{"path":"/Users/minyue/Desktop/minyue/notes/node_modules/cache-loader/dist/cjs.js","mtime":1640082691785},{"path":"/Users/minyue/Desktop/minyue/notes/node_modules/vue-loader/lib/index.js","mtime":1640082691970},{"path":"/Users/minyue/Desktop/minyue/notes/node_modules/@vuepress/markdown-loader/index.js","mtime":1640082691287}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}