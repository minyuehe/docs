{"remainingRequest":"/Users/minyue/Desktop/minyue/notes/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/minyue/Desktop/minyue/notes/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/minyue/Desktop/minyue/notes/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/minyue/Desktop/minyue/notes/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/minyue/Desktop/minyue/notes/docs/guide/README.md?vue&type=template&id=1a7dd7a6&","dependencies":[{"path":"/Users/minyue/Desktop/minyue/notes/docs/guide/README.md","mtime":1629595222355},{"path":"/Users/minyue/Desktop/minyue/notes/node_modules/cache-loader/dist/cjs.js","mtime":1640082691785},{"path":"/Users/minyue/Desktop/minyue/notes/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1640082692121},{"path":"/Users/minyue/Desktop/minyue/notes/node_modules/cache-loader/dist/cjs.js","mtime":1640082691785},{"path":"/Users/minyue/Desktop/minyue/notes/node_modules/vue-loader/lib/index.js","mtime":1640082691970},{"path":"/Users/minyue/Desktop/minyue/notes/node_modules/@vuepress/markdown-loader/index.js","mtime":1640082691287}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3ZtID0gdGhpcwogIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogIHJldHVybiBfYygKICAgICJDb250ZW50U2xvdHNEaXN0cmlidXRvciIsCiAgICB7IGF0dHJzOiB7ICJzbG90LWtleSI6IF92bS4kcGFyZW50LnNsb3RLZXkgfSB9LAogICAgWwogICAgICBfYygiaDEiLCB7IGF0dHJzOiB7IGlkOiAiaW50cm9kdWN0aW9uIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNpbnRyb2R1Y3Rpb24iIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEludHJvZHVjdGlvbiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJCaXQiKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoIlZ1ZVByZXNzIGlzIGNvbXBvc2VkIG9mIHR3byBwYXJ0czogYSAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWVwcmVzcy90cmVlL21hc3Rlci9wYWNrYWdlcy8lNDB2dWVwcmVzcy9jb3JlIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJtaW5pbWFsaXN0aWMgc3RhdGljIHNpdGUgZ2VuZXJhdG9yIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiB3aXRoIGEgVnVlLXBvd2VyZWQgIiksCiAgICAgICAgICBfYygiUm91dGVyTGluayIsIHsgYXR0cnM6IHsgdG86ICIvdGhlbWUvIiB9IH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJ0aGVtaW5nIHN5c3RlbSIpLAogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgICBfYygiUm91dGVyTGluayIsIHsgYXR0cnM6IHsgdG86ICIvcGx1Z2luLyIgfSB9LCBbCiAgICAgICAgICAgIF92bS5fdigiUGx1Z2luIEFQSSIpLAogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiwgYW5kIGEgIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICB7IGF0dHJzOiB7IHRvOiAiL3RoZW1lL2RlZmF1bHQtdGhlbWUtY29uZmlnLmh0bWwiIH0gfSwKICAgICAgICAgICAgW192bS5fdigiZGVmYXVsdCB0aGVtZSIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBvcHRpbWl6ZWQgZm9yIHdyaXRpbmcgdGVjaG5pY2FsIGRvY3VtZW50YXRpb24uIEl0IHdhcyBjcmVhdGVkIHRvIHN1cHBvcnQgdGhlIGRvY3VtZW50YXRpb24gbmVlZHMgb2YgVnVl4oCZcyBvd24gc3ViIHByb2plY3RzLiIKICAgICAgICAgICksCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiRWFjaCBwYWdlIGdlbmVyYXRlZCBieSBWdWVQcmVzcyBoYXMgaXRzIG93biBwcmUtcmVuZGVyZWQgc3RhdGljIEhUTUwsIHByb3ZpZGluZyBncmVhdCBsb2FkaW5nIHBlcmZvcm1hbmNlIGFuZCBpcyBTRU8tZnJpZW5kbHkuIFlldCwgb25jZSB0aGUgcGFnZSBpcyBsb2FkZWQsIFZ1ZSB0YWtlcyBvdmVyIHRoZSBzdGF0aWMgY29udGVudCBhbmQgdHVybnMgaXQgaW50byBhIGZ1bGwgU2luZ2xlLVBhZ2UgQXBwbGljYXRpb24gKFNQQSkuIEV4dHJhIHBhZ2VzIGFyZSBmZXRjaGVkIG9uIGRlbWFuZCBhcyB0aGUgdXNlciBuYXZpZ2F0ZXMgYXJvdW5kIHRoZSBzaXRlLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJob3ctaXQtd29ya3MiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2hvdy1pdC13b3JrcyIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgSG93IEl0IFdvcmtzIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJBIFZ1ZVByZXNzIHNpdGUgaXMgaW4gZmFjdCBhIFNQQSBwb3dlcmVkIGJ5ICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwOi8vdnVlanMub3JnLyIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJWdWUiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1yb3V0ZXIiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiVnVlIFJvdXRlciIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwOi8vd2VicGFjay5qcy5vcmcvIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIndlYnBhY2siKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIuIElmIHlvdeKAmXZlIHVzZWQgVnVlIGJlZm9yZSwgeW91IHdpbGwgbm90aWNlIHRoZSBmYW1pbGlhciBkZXZlbG9wbWVudCBleHBlcmllbmNlIHdoZW4geW91IGFyZSB3cml0aW5nIG9yIGRldmVsb3BpbmcgY3VzdG9tIHRoZW1lcyAoeW91IGNhbiBldmVuIHVzZSBWdWUgRGV2VG9vbHMgdG8gZGVidWcgeW91ciBjdXN0b20gdGhlbWUhKS4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiRHVyaW5nIHRoZSBidWlsZCwgd2UgY3JlYXRlIGEgc2VydmVyLXJlbmRlcmVkIHZlcnNpb24gb2YgdGhlIGFwcCBhbmQgcmVuZGVyIHRoZSBjb3JyZXNwb25kaW5nIEhUTUwgYnkgdmlydHVhbGx5IHZpc2l0aW5nIGVhY2ggcm91dGUuIFRoaXMgYXBwcm9hY2ggaXMgaW5zcGlyZWQgYnkgIgogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vbnV4dGpzLm9yZy8iLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiTnV4dCIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIncyAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm51eHQgZ2VuZXJhdGUiKV0pLAogICAgICAgIF92bS5fdigiIGNvbW1hbmQgYW5kIG90aGVyIHByb2plY3RzIGxpa2UgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vd3d3LmdhdHNieWpzLm9yZy8iLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiR2F0c2J5IiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIi4iKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIkVhY2ggTWFya2Rvd24gZmlsZSBpcyBjb21waWxlZCBpbnRvIEhUTUwgd2l0aCAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL21hcmtkb3duLWl0L21hcmtkb3duLWl0IiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIm1hcmtkb3duLWl0IiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGFuZCB0aGVuIHByb2Nlc3NlZCBhcyB0aGUgdGVtcGxhdGUgb2YgYSBWdWUgY29tcG9uZW50LiBUaGlzIGFsbG93cyB5b3UgdG8gZGlyZWN0bHkgdXNlIFZ1ZSBpbnNpZGUgeW91ciBNYXJrZG93biBmaWxlcyBhbmQgaXMgZ3JlYXQgd2hlbiB5b3UgbmVlZCB0byBlbWJlZCBkeW5hbWljIGNvbnRlbnQuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImZlYXR1cmVzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNmZWF0dXJlcyIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgRmVhdHVyZXMiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfYygic3Ryb25nIiwgW192bS5fdigiQnVpbHQtaW4gTWFya2Rvd24gZXh0ZW5zaW9ucyIpXSldKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygKICAgICAgICAgICJsaSIsCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgICB7IGF0dHJzOiB7IHRvOiAiL2d1aWRlL21hcmtkb3duLmh0bWwjdGFibGUtb2YtY29udGVudHMiIH0gfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJUYWJsZSBvZiBDb250ZW50cyIpXQogICAgICAgICAgICApLAogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKAogICAgICAgICAgImxpIiwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICAgIHsgYXR0cnM6IHsgdG86ICIvZ3VpZGUvbWFya2Rvd24uaHRtbCNjdXN0b20tY29udGFpbmVycyIgfSB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIkN1c3RvbSBDb250YWluZXJzIildCiAgICAgICAgICAgICksCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAibGkiLAogICAgICAgICAgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgdG86ICIvZ3VpZGUvbWFya2Rvd24uaHRtbCNsaW5lLWhpZ2hsaWdodGluZy1pbi1jb2RlLWJsb2NrcyIsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiTGluZSBIaWdobGlnaHRpbmciKV0KICAgICAgICAgICAgKSwKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygKICAgICAgICAgICJsaSIsCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgICB7IGF0dHJzOiB7IHRvOiAiL2d1aWRlL21hcmtkb3duLmh0bWwjbGluZS1udW1iZXJzIiB9IH0sCiAgICAgICAgICAgICAgW192bS5fdigiTGluZSBOdW1iZXJzIildCiAgICAgICAgICAgICksCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAibGkiLAogICAgICAgICAgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgICAgeyBhdHRyczogeyB0bzogIi9ndWlkZS9tYXJrZG93bi5odG1sI2ltcG9ydC1jb2RlLXNuaXBwZXRzIiB9IH0sCiAgICAgICAgICAgICAgW192bS5fdigiSW1wb3J0IENvZGUgU25pcHBldHMiKV0KICAgICAgICAgICAgKSwKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfYygic3Ryb25nIiwgW192bS5fdigiVXNpbmcgVnVlIGluIE1hcmtkb3duIildKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKAogICAgICAgICAgImxpIiwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICAgIHsgYXR0cnM6IHsgdG86ICIvZ3VpZGUvdXNpbmctdnVlLmh0bWwjdGVtcGxhdGluZyIgfSB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIlRlbXBsYXRpbmciKV0KICAgICAgICAgICAgKSwKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygKICAgICAgICAgICJsaSIsCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgICB7IGF0dHJzOiB7IHRvOiAiL2d1aWRlL3VzaW5nLXZ1ZS5odG1sI3VzaW5nLWNvbXBvbmVudHMiIH0gfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJVc2luZyBDb21wb25lbnRzIildCiAgICAgICAgICAgICksCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX2MoInN0cm9uZyIsIFtfdm0uX3YoIlZ1ZS1wb3dlcmVkIGN1c3RvbSB0aGVtZSBzeXN0ZW0iKV0pXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoCiAgICAgICAgICAibGkiLAogICAgICAgICAgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgdG86ICIvdGhlbWUvd3JpdGluZy1hLXRoZW1lLmh0bWwjc2l0ZS1hbmQtcGFnZS1tZXRhZGF0YSIsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiTWV0YWRhdGEiKV0KICAgICAgICAgICAgKSwKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygKICAgICAgICAgICJsaSIsCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgICB7IGF0dHJzOiB7IHRvOiAiL3RoZW1lL3dyaXRpbmctYS10aGVtZS5odG1sI2NvbnRlbnQtZXhjZXJwdCIgfSB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIkNvbnRlbnQgRXhjZXJwdCIpXQogICAgICAgICAgICApLAogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW19jKCJzdHJvbmciLCBbX3ZtLl92KCJEZWZhdWx0IHRoZW1lIildKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlJlc3BvbnNpdmUgbGF5b3V0IildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygKICAgICAgICAgICJsaSIsCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgICB7IGF0dHJzOiB7IHRvOiAiL3RoZW1lL2RlZmF1bHQtdGhlbWUtY29uZmlnLmh0bWwjaG9tZXBhZ2UiIH0gfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJPcHRpb25hbCBIb21lcGFnZSIpXQogICAgICAgICAgICApLAogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKAogICAgICAgICAgImxpIiwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHRvOiAiL3RoZW1lL2RlZmF1bHQtdGhlbWUtY29uZmlnLmh0bWwjYnVpbHQtaW4tc2VhcmNoIiwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJTaW1wbGUgb3V0LW9mLXRoZS1ib3ggaGVhZGVyLWJhc2VkIHNlYXJjaCIpXQogICAgICAgICAgICApLAogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKAogICAgICAgICAgImxpIiwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHRvOiAiL3RoZW1lL2RlZmF1bHQtdGhlbWUtY29uZmlnLmh0bWwjYWxnb2xpYS1zZWFyY2giLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIkFsZ29saWEgU2VhcmNoIildCiAgICAgICAgICAgICksCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAibGkiLAogICAgICAgICAgWwogICAgICAgICAgICBfdm0uX3YoIkN1c3RvbWl6YWJsZSAiKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICAgIHsgYXR0cnM6IHsgdG86ICIvdGhlbWUvZGVmYXVsdC10aGVtZS1jb25maWcuaHRtbCNuYXZiYXIiIH0gfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJuYXZiYXIiKV0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgICAgeyBhdHRyczogeyB0bzogIi90aGVtZS9kZWZhdWx0LXRoZW1lLWNvbmZpZy5odG1sI3NpZGViYXIiIH0gfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJzaWRlYmFyIildCiAgICAgICAgICAgICksCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAibGkiLAogICAgICAgICAgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgdG86ICIvdGhlbWUvZGVmYXVsdC10aGVtZS1jb25maWcuaHRtbCNnaXQtcmVwby1hbmQtZWRpdC1saW5rcyIsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiQXV0by1nZW5lcmF0ZWQgR2l0SHViIGxpbmsgYW5kIHBhZ2UgZWRpdCBsaW5rcyIpXQogICAgICAgICAgICApLAogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKAogICAgICAgICAgImxpIiwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHRvOiAiL3RoZW1lL2RlZmF1bHQtdGhlbWUtY29uZmlnLmh0bWwjcG9wdXAtdWktdG8tcmVmcmVzaC1jb250ZW50cyIsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiUFdBOiBQb3B1cCBVSSB0byByZWZyZXNoIGNvbnRlbnRzIildCiAgICAgICAgICAgICksCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAibGkiLAogICAgICAgICAgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYXR0cnM6IHsgdG86ICIvdGhlbWUvZGVmYXVsdC10aGVtZS1jb25maWcuaHRtbCNsYXN0LXVwZGF0ZWQiIH0sCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJMYXN0IFVwZGF0ZWQiKV0KICAgICAgICAgICAgKSwKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygKICAgICAgICAgICJsaSIsCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJSb3V0ZXJMaW5rIiwgeyBhdHRyczogeyB0bzogIi9ndWlkZS9pMThuLmh0bWwiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiTXVsdGktTGFuZ3VhZ2UgU3VwcG9ydCIpLAogICAgICAgICAgICBdKSwKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfYygic3Ryb25nIiwgW192bS5fdigiQmxvZyB0aGVtZSIpXSldKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL3Z1ZXByZXNzLXRoZW1lLWJsb2cudWxpdnouY29tLyIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiRG9jdW1lbnRhdGlvbiIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vdWxpdnouY29tLyIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiTGl2ZSBFeGFtcGxlIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX2MoInN0cm9uZyIsIFtfdm0uX3YoIlBsdWdpbiIpXSldKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygKICAgICAgICAgICJsaSIsCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJSb3V0ZXJMaW5rIiwgeyBhdHRyczogeyB0bzogIi9wbHVnaW4vIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIlBvd2VyZnVsIFBsdWdpbiBBUEkiKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly92dWVwcmVzcy1wbHVnaW4tYmxvZy51bGl2ei5jb20vIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJCbG9nIFBsdWdpbiIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKAogICAgICAgICAgImxpIiwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICAgIHsgYXR0cnM6IHsgdG86ICIvcGx1Z2luL29mZmljaWFsL3BsdWdpbi1zZWFyY2guaHRtbCIgfSB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIlNlYXJjaCBQbHVnaW4iKV0KICAgICAgICAgICAgKSwKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygKICAgICAgICAgICJsaSIsCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgICB7IGF0dHJzOiB7IHRvOiAiL3BsdWdpbi9vZmZpY2lhbC9wbHVnaW4tcHdhLmh0bWwiIH0gfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJQV0EgUGx1Z2luIildCiAgICAgICAgICAgICksCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAibGkiLAogICAgICAgICAgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYXR0cnM6IHsgdG86ICIvcGx1Z2luL29mZmljaWFsL3BsdWdpbi1nb29nbGUtYW5hbHl0aWNzLmh0bWwiIH0sCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJHb29nbGUgQW5hbHl0aWNzIFBsdWdpbiIpXQogICAgICAgICAgICApLAogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIi4uLiIpXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIndoeS1ub3QiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3doeS1ub3QiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgV2h5IE5vdCAuLi4/IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogIm51eHQiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI251eHQiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgTnV4dCIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJOdXh0IGlzIGNhcGFibGUgb2YgZG9pbmcgd2hhdCBWdWVQcmVzcyBkb2VzLCBidXQgaXTigJlzIGRlc2lnbmVkIGZvciBidWlsZGluZyBhcHBsaWNhdGlvbnMuIFZ1ZVByZXNzIGlzIGZvY3VzZWQgb24gY29udGVudC1jZW50cmljIHN0YXRpYyBzaXRlcyBhbmQgcHJvdmlkZXMgZmVhdHVyZXMgdGFpbG9yZWQgZm9yIHRlY2huaWNhbCBkb2N1bWVudGF0aW9uIG91dCBvZiB0aGUgYm94LiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJkb2NzaWZ5LWRvY3V0ZSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjZG9jc2lmeS1kb2N1dGUiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIERvY3NpZnkgLyBEb2N1dGUiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQm90aCBhcmUgZ3JlYXQgcHJvamVjdHMgYW5kIGFsc28gVnVlLXBvd2VyZWQuIEV4Y2VwdCB0aGV5IGFyZSBib3RoIGZ1bGx5IHJ1bnRpbWUtZHJpdmVuIGFuZCB0aGVyZWZvcmUgbm90IFNFTy1mcmllbmRseS4gSWYgeW91IGRvbuKAmXQgY2FyZSBmb3IgU0VPIGFuZCBkb27igJl0IHdhbnQgdG8gbWVzcyB3aXRoIGluc3RhbGxpbmcgZGVwZW5kZW5jaWVzLCB0aGVzZSBhcmUgc3RpbGwgZ3JlYXQgY2hvaWNlcy4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiaGV4byIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjaGV4byIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiBIZXhvIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkhleG8gaGFzIGJlZW4gc2VydmluZyB0aGUgVnVlIGRvY3Mgd2VsbCAtIGluIGZhY3QsIHdlIGFyZSBwcm9iYWJseSBzdGlsbCBhIGxvbmcgd2F5IHRvIGdvIGZyb20gbWlncmF0aW5nIGF3YXkgZnJvbSBpdCBmb3Igb3VyIG1haW4gc2l0ZS4gVGhlIGJpZ2dlc3QgcHJvYmxlbSBpcyB0aGF0IGl0cyB0aGVtaW5nIHN5c3RlbSBpcyBzdGF0aWMgYW5kIHN0cmluZy1iYXNlZCAtIHdlIHdhbnQgdG8gdGFrZSBhZHZhbnRhZ2Ugb2YgVnVlIGZvciBib3RoIHRoZSBsYXlvdXQgYW5kIHRoZSBpbnRlcmFjdGl2aXR5LiBBbHNvLCBIZXhv4oCZcyBNYXJrZG93biByZW5kZXJpbmcgaXNu4oCZdCB0aGUgbW9zdCBmbGV4aWJsZSB0byBjb25maWd1cmUuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImdpdGJvb2siIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2dpdGJvb2siIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgR2l0Qm9vayIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJXZeKAmXZlIGJlZW4gdXNpbmcgR2l0Qm9vayBmb3IgbW9zdCBvZiBvdXIgc3ViIHByb2plY3QgZG9jcy4gVGhlIHByaW1hcnkgcHJvYmxlbSB3aXRoIEdpdEJvb2sgaXMgdGhhdCBpdHMgZGV2ZWxvcG1lbnQgcmVsb2FkIHBlcmZvcm1hbmNlIGlzIGludG9sZXJhYmxlIHdpdGggYSBsYXJnZSBhbW91bnQgb2YgZmlsZXMuIFRoZSBkZWZhdWx0IHRoZW1lIGFsc28gaGFzIGEgcHJldHR5IGxpbWl0aW5nIG5hdmlnYXRpb24gc3RydWN0dXJlLCBhbmQgdGhlIHRoZW1pbmcgc3lzdGVtIGlzLCBhZ2Fpbiwgbm90IFZ1ZSBiYXNlZC4gVGhlIHRlYW0gYmVoaW5kIEdpdEJvb2sgaXMgYWxzbyBtb3JlIGZvY3VzZWQgb24gdHVybmluZyBpdCBpbnRvIGEgY29tbWVyY2lhbCBwcm9kdWN0IHJhdGhlciB0aGFuIGFuIG9wZW4tc291cmNlIHRvb2wuIgogICAgICAgICksCiAgICAgIF0pLAogICAgXSwKICAgIDEKICApCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}